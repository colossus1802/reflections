>>> What happens when you initialize a repository? Why do you need to do it?

A .git directory is created that contains the initial metadata files needed
by git.


>>> How is the staging area different from the working directory and the 
    repository? What value do you think it offers?

It keeps the "to be commited" file/dir contents cleanly and clearly separated 
from the file/dir contents of the working dir and the repo.  However, these
files concurrently exist in the working dir so you must use command 
"git status" to be sure of what is what in the working dir.


>>> How can you use the staging area to make sure you have one commit per 
    logical change?

By using "git add" to only add file changes desired.  Use "git diff" and 
especially "git diff --staged" to verify changes before commit.


>>> What are some situations when branches would be helpful in keeping your 
    history organized? How would branches help?

When a new release is needed which has new features and capabilities that 
should not be part of that release.  Bug fixes to older releases can be 
maintained with branches too.  Could also use a branch to try out a new set
of adds but not including them in the master.

>>> How do the diagrams help you visualize the branch structure?

>>> What is the result of merging two branches together? Why do we represent it
    in the diagram the way we do?

>>> What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

